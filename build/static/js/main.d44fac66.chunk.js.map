{"version":3,"sources":["reducers/index.js","reducers/test.js","containers/App.js","registerServiceWorker.js","index.js","components/Async.js"],"names":["root","combineReducers","test","state","action","type","payload","supportsHistory","window","history","Home","Async","NotImplemented","Header","Footer","style","background","App","ReactGA","initialize","process","GA_TRACKING_ID","set","page","location","pathname","pageview","GA_INITIALIZED","this","initGA","logPageView","BrowserRouter","forceRefresh","Switch","Route","exact","strict","sensitive","path","component","PureComponent","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","createStoreWithMiddleware","applyMiddleware","thunk","createStore","ReactDOM","store","reducers","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","imported","props","componentDidMount","a","default","setState","loading","C","align","color","Component"],"mappings":"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","file":"static/js/main.d44fac66.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\r\n\r\nimport Test from './test'\r\n\r\nconst root = combineReducers({\r\n  test: Test\r\n})\r\n\r\nexport default root\r\n","export default (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'INIT_WEB3':\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\n\r\nimport ReactGA from 'react-ga'\r\n\r\nimport Async from 'components/Async'\r\n\r\nconst supportsHistory = 'pushState' in window.history\r\nconst Home = Async(() => import('containers/Home'))\r\nconst NotImplemented = Async(() => import('containers/NotImplemented'))\r\nconst Header = Async(() => import('components/Header'))\r\nconst Footer = Async(() => import('components/Footer'))\r\n\r\n/*  eslint-disable no-dupe-keys */\r\nconst style = {\r\n  background: 'rgb(0,183,234)',\r\n  background: '-moz-linear-gradient(top, rgba(0,0,234,1) 0%, rgba(0,158,195,1) 100%)',\r\n  background: '-webkit-linear-gradient(top, rgba(0,0,234,1) 0%,rgba(0,158,195,1) 100%)',\r\n  background: 'linear-gradient(to bottom, rgba(0,0,234,1) 0%,rgba(0,158,195,1) 100%)',\r\n  filter: 'progid:DXImageTransform.Microsoft.gradient( startColorstr=\\'#00b7ea\\', endColorstr=\\'#009ec3\\',GradientType=0 )'\r\n}\r\n\r\nclass App extends PureComponent {\r\n  initGA () {\r\n    ReactGA.initialize(process.env.GA_TRACKING_ID)\r\n    // console.log('Initialized')\r\n  }\r\n\r\n  logPageView () {\r\n    ReactGA.set({ page: window.location.pathname })\r\n    ReactGA.pageview(window.location.pathname)\r\n    // console.log(`Logged: ${window.location.pathname}`)\r\n  }\r\n\r\n  componentDidMount () {\r\n    if (process.env.NODE_ENV === 'production') {\r\n      if (!window.GA_INITIALIZED) {\r\n        this.initGA()\r\n        window.GA_INITIALIZED = true\r\n      }\r\n      this.logPageView()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={style}>\r\n          <BrowserRouter forceRefresh={!supportsHistory}>\r\n            <div>\r\n              <Header />\r\n              <Switch>\r\n                <Route exact strict sensitive path='/' component={Home} />\r\n                <Route exact strict sensitive path='/not_implemented' component={NotImplemented} />\r\n              </Switch>\r\n            </div>\r\n          </BrowserRouter>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        checkValidServiceWorker(swUrl)\r\n\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://goo.gl/SC7cgQ')\r\n        })\r\n      } else {\r\n        registerValidSW(swUrl)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              console.log('New content is available; please refresh.')\r\n            } else {\r\n              console.log('Content is cached for offline use.')\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        registerValidSW(swUrl)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie11'\r\nimport React from 'react'\r\nimport * as ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport reducers from 'reducers'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport App from 'containers/App'\r\nimport registerServiceWorker from './registerServiceWorker'\r\nconst createStoreWithMiddleware = applyMiddleware(thunk)(createStore)\r\n\r\nReactDOM.render(\r\n  <Provider store={createStoreWithMiddleware(reducers)}>\r\n    <div>\r\n      <App />\r\n    </div>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nregisterServiceWorker()\r\n","import React, { Component } from 'react'\r\nimport { GridLoader } from 'react-spinners'\r\n\r\nexport default function Async(imported) {\r\n  class Async extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n\r\n      this.state = {\r\n        component: null,\r\n        loading: true\r\n      }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n      const { default: component } = await imported()\r\n\r\n      this.setState({\r\n        component: component,\r\n        loading: false\r\n      })\r\n    }\r\n\r\n    render() {\r\n      const C = this.state.component\r\n\r\n      return C ? <C {...this.props} /> : <div align='center'><GridLoader color={'#123abc'} loading={this.state.loading} /></div>\r\n    }\r\n  }\r\n\r\n  return Async\r\n\r\n}\r\n"],"sourceRoot":""}